#!/bin/bash

# Abort entire script if any command fails
set -e

. ~/.config/s3ql-backup/s3ql-backup.conf
mountpoint=${MOUNTPOINT-~/.s3ql-backup}

do_mount() {
  fsck.s3ql --batch "$STORAGE_URL"

  mkdir -p "$mountpoint"
  mount.s3ql --metadata-upload-interval 0 "$STORAGE_URL" "$mountpoint"
}

is_mounted() {
  mount -l -t fuse.s3ql | grep -q "$mountpoint"
}

is_mounted || do_mount

source_directory="$1"
if ! test -n "$source_directory"; then
  echo Please give me directory to backup
  exit 1
fi

# Figure out the most recent backup
cd "$mountpoint"
last_backup=`python <<EOF
import os
import re
backups=sorted(x for x in os.listdir('.') if re.match(r'^[\\d-]{10}_[\\d:]{8}$', x))
if backups:
    print backups[-1]
EOF`

# Duplicate the most recent backup unless this is the first backup
new_backup=`date "+%Y-%m-%d_%H:%M:%S"`
if [ -n "$last_backup" ]; then
    echo "Copying $last_backup to $new_backup..."
    s3qlcp "$last_backup" "$new_backup"

    # Make the last backup immutable
    # (in case the previous backup was interrupted prematurely)
    s3qllock "$last_backup"
fi

# ..and update the copy
rsync -aHAXx --delete-during --delete-excluded --partial -v \
    --exclude /.cache/ \
    --exclude /.s3ql/ \
    --exclude /.thumbnails/ \
    --exclude /tmp/ \
    "$source_directory" "./$new_backup/"

# Make the new backup immutable
s3qllock "$new_backup"
s3qlctrl upload-meta .
